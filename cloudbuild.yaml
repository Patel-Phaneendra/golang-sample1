# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# [START cloudbuild_go_yaml]
# [START cloudbuild_go_test_yaml]
steps:
  # Run tests and save to file
  # - name: golang:1.18
  #   entrypoint: /bin/bash
  #   args: 
  #     - -c
  #     - |
  #       go get github.com/jstemmer/go-junit-report
  #       go install github.com/jstemmer/go-junit-report
  #       2>&1 go test -timeout 1m -v ./... | tee sponge.log
  #       /go/bin/go-junit-report -set-exit-code < sponge.log > ${SHORT_SHA}_test_log.xml
  # [END cloudbuild_go_test_yaml]
#  - name: 'asia-south1-docker.pkg.dev/hbl-poc-digfac-anthos-prj/mb-devops/sonar-scanner:latest'
#    args:
#    - '-Dsonar.host.url=http://34.93.206.118:9000'
#    - '-Dsonar.login=ajiteshh@gmail.com'
#    - '-Dsonar.projectKey=mb'
#    - '-Dsonar.sources=golang-sample/.'
#    - '-Dsonar.login=b899c4c79075847d6bb77f1fcc9695d88bdb3ee0'

  # [START cloudbuild_go_image_yaml]
  # Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 
           'asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA', '/golang-sample1/hello1/.']
    dir: 'golang-sample1/hello1' 
  # [END cloudbuild_go_image_yaml]
  
  # [START cloudbuild_go_push_yaml]
  # Docker push to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA']
    id: push
  # [END cloudbuild_go_push_yaml]

  # [START cloudbuild_go_inspect_yaml]
  # Docker inspect to get image details  
  - name: gcr.io/cloud-builders/docker
    entrypoint: /bin/bash
    args:
    - -c
    - |
      docker image inspect asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA --format '{{index .RepoDigests 0}}' > image-digest.txt &&
      cat image-digest.txt
    waitFor: 
    - push  
    id: inspect
  # [END cloudbuild_go_inspect_yaml]
 
 
# [START cloudbuild_go_deploy_yaml]
# Deploy to GKE 
  - name: "gcr.io/cloud-builders/gke-deploy"
    args:
    - run
    - --filename=golang-sample1/hello1/.
    - --image=asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA
    - --location=asia-south1
    - --cluster=hbl-poc-mb-rw-dm-cluster
# [END cloudbuild_go_deploy_yaml]

# [START cloudbuild_go_logs_yaml]
# Save test logs to Google Cloud Storage
# artifacts:
#   objects:
#     location: gs://mb-devops/
#     paths:
#       - ${SHORT_SHA}_test_log.xml
# [END cloudbuild_go_logs_yaml]
# Store images in Google Artifact Registry

substitutions:
    _SERVICE_URL: https://voucher-server-hobr26cxda-el.a.run.app/
    _SERVICE_ACCOUNT: voucher-invoker@$PROJECT_ID.iam.gserviceaccount.com
images:
  - asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA

options:
 logging: CLOUD_LOGGING_ONLY

---

steps:
  # Run tests and save to file
  # - name: golang:1.18
  #   entrypoint: /bin/bash
  #   args: 
  #     - -c
  #     - |
  #       go get github.com/jstemmer/go-junit-report
  #       go install github.com/jstemmer/go-junit-report
  #       2>&1 go test -timeout 1m -v ./... | tee sponge.log
  #       /go/bin/go-junit-report -set-exit-code < sponge.log > ${SHORT_SHA}_test_log.xml
  # [END cloudbuild_go_test_yaml]
#  - name: 'asia-south1-docker.pkg.dev/hbl-poc-digfac-anthos-prj/mb-devops/sonar-scanner:latest'
#    args:
#    - '-Dsonar.host.url=http://34.93.206.118:9000'
#    - '-Dsonar.login=ajiteshh@gmail.com'
#    - '-Dsonar.projectKey=mb'
#    - '-Dsonar.sources=golang-sample/.'
#    - '-Dsonar.login=b899c4c79075847d6bb77f1fcc9695d88bdb3ee0'

  # [START cloudbuild_go_image_yaml]
  # Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 
           'asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA', '/golang-sample1/hello2/.']
    dir: 'golang-sample1/hello2'  
  # [END cloudbuild_go_image_yaml]
  
  # [START cloudbuild_go_push_yaml]
  # Docker push to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA']
    id: push
  # [END cloudbuild_go_push_yaml]

  # [START cloudbuild_go_inspect_yaml]
  # Docker inspect to get image details  
  - name: gcr.io/cloud-builders/docker
    entrypoint: /bin/bash
    args:
    - -c
    - |
      docker image inspect asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA --format '{{index .RepoDigests 0}}' > image-digest.txt &&
      cat image-digest.txt
    waitFor: 
    - push  
    id: inspect
  # [END cloudbuild_go_inspect_yaml]
 
 
# [START cloudbuild_go_deploy_yaml]
# Deploy to GKE 
  - name: "gcr.io/cloud-builders/gke-deploy"
    args:
    - run
    - --filename=golang-sample1/hello2/.
    - --image=asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA
    - --location=asia-south1
    - --cluster=hbl-poc-mb-rw-dm-cluster
# [END cloudbuild_go_deploy_yaml]

# [START cloudbuild_go_logs_yaml]
# Save test logs to Google Cloud Storage
# artifacts:
#   objects:
#     location: gs://mb-devops/
#     paths:
#       - ${SHORT_SHA}_test_log.xml
# [END cloudbuild_go_logs_yaml]
# Store images in Google Artifact Registry

substitutions:
    _SERVICE_URL: https://voucher-server-hobr26cxda-el.a.run.app/
    _SERVICE_ACCOUNT: voucher-invoker@$PROJECT_ID.iam.gserviceaccount.com
images:
  - asia-south1-docker.pkg.dev/$PROJECT_ID/mb-devops/myimage:$SHORT_SHA

options:
 logging: CLOUD_LOGGING_ONLY
